{"version":3,"file":"component---src-templates-all-markdown-files-js-eddc10d68447900f774e.js","mappings":"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","sources":["webpack://newsweb/./node_modules/@material-ui/core/esm/Card/Card.js","webpack://newsweb/./node_modules/@material-ui/core/esm/CardContent/CardContent.js","webpack://newsweb/./src/components/GridListTileComponent.js","webpack://newsweb/./src/templates/allMarkdownFiles.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import React from 'react';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\nimport { Link } from 'gatsby';\nimport { Typography, Tooltip, Grid, Card, CardContent, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    maxWidth: 345,\n    boxShadow: 'none',\n    position: 'relative',\n  },\n  media: {\n    height: 140,\n  },\n  tooltip: {\n    backgroundColor: '#c62828',\n    fontSize: '0.7em',\n  },\n  link: {\n    textDecoration: 'none',\n  },\n  divider: {\n    margin: '10px 0',\n  },\n  freeText: {\n    position: 'absolute',\n    top: '10px',\n    right: '10px',\n    backgroundColor: 'transparent',\n    color: 'red',\n    padding: '2px 5px',\n    fontSize: '0.7em',\n    fontWeight: 'bold',\n    zIndex: 1,\n    \"&::before\": {\n      content: \"''\",\n      position: 'absolute',\n      top: '15%', // Offset the border from the top of the container\n      bottom: 0,\n      left: '-1px',\n      borderLeft: '2px solid red',\n      height: '60%', // Set the height of the border\n    },\n  },\n}));\n\nconst GridListTileComponent = ({ node }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} sm={6} md={4} lg={3}>\n      <Link to={node.fields.slug} className={classes.link}>\n        <Tooltip title={node.frontmatter.title} classes={{ tooltip: classes.tooltip }}>\n          <Card className={classes.card}>\n            <div className={classes.freeText}>{node.frontmatter.article}</div>\n            <GatsbyImage\n              image={getImage(node.frontmatter.image)}\n              alt={node.frontmatter.title}\n              className={classes.media}\n            />\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h2\">\n                {node.frontmatter.title}\n              </Typography>\n              <Divider className={classes.divider} />\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {node.frontmatter.summary}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Tooltip>\n      </Link>\n    </Grid>\n  );\n};\n\nexport default GridListTileComponent;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport GridListTileComponent from '../components/GridListTileComponent';\nimport { Grid } from '@material-ui/core';\n\nexport default function AllMarkdownFiles({ data }) {\n  return (\n    <Layout>\n      <Grid container spacing={3}>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <GridListTileComponent key={node.id} node={node} />\n        ))}\n      </Grid>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query($folderName: String!) {\n    allMarkdownRemark(filter: {fields: {folderName: {eq: $folderName}}}) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            article\n            summary\n            image {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  placeholder: BLURRED\n                  aspectRatio: 2.33\n                  width: 900\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["Card","props","ref","classes","className","_props$raised","raised","other","Paper","root","elevation","withStyles","overflow","name","CardContent","_props$component","component","Component","padding","paddingBottom","useStyles","makeStyles","card","maxWidth","boxShadow","position","media","height","tooltip","backgroundColor","fontSize","link","textDecoration","divider","margin","freeText","top","right","color","fontWeight","zIndex","content","bottom","left","borderLeft","_ref","node","React","Grid","item","xs","sm","md","lg","Link","to","fields","slug","Tooltip","title","frontmatter","article","GatsbyImage","image","getImage","alt","Typography","variant","Divider","summary","AllMarkdownFiles","data","Layout","container","spacing","allMarkdownRemark","edges","map","_ref2","GridListTileComponent","key","id"],"sourceRoot":""}